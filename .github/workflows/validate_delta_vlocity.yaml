name: Campana - Validate pull request

on:
  pull_request:
    branches: [ dev, qa, uat, staging, hotfix, main ]
    types: [ labeled ]

env:
  SF_DISABLE_DNS_CHECK: true
  SF_DISABLE_SOURCE_MEMBER_POLLING: true
  SF_DNS_TIMEOUT: 120

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  validate:
    name: Run tests
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    if: |
      github.actor != 'dependabot[bot]' &&
      (github.event.label.name == 'RUN_TESTS' || github.event.label.name == 'NOT_RUN_TESTS')
    env:
      BRANCH_REF: ${{ github.base_ref }}
      GITHUB_EVENT_LABEL_NAME: ${{ github.event.label.name }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Setup nodeJS
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          check-latest: true

      - name: Install SFDX CLI
        run: npm install @salesforce/cli -g

      - name: Install the SFDX Git Delta
        run: echo 'y' | sf plugins install sfdx-git-delta

      - name: Install Vlocity Build Tool
        run: npm install -g vlocity

      - name: Set ENV Auth URL Org
        id: set-env-org
        run: |
          declare -A URL_MAP=(
            [dev]="${{ secrets.DEV_AUTH_URL }}"
            [qa]="${{ secrets.QA_AUTH_URL }}"
            [uat]="${{ secrets.UAT_AUTH_URL }}"
            [staging]="${{ secrets.STAGING_AUTH_URL }}"
            [hotfix]="${{ secrets.HOTFIX_AUTH_URL }}"
            [main]="${{ secrets.PROD_AUTH_URL }}"
          )
          echo "env=${URL_MAP[$BRANCH_REF]:-unknown}" >> $GITHUB_OUTPUT

      - name: Set ENV Auth User Org
        id: set-env-user
        run: |
          declare -A USER_MAP=(
            [dev]="${{ secrets.DEV_AUTH_USER }}"
            [qa]="${{ secrets.QA_AUTH_USER }}"
            [uat]="${{ secrets.UAT_AUTH_USER }}"
            [staging]="${{ secrets.STAGING_AUTH_USER }}"
            [hotfix]="${{ secrets.HOTFIX_AUTH_USER }}"
            [main]="${{ secrets.PROD_AUTH_USER }}"
          )
          echo "env=${USER_MAP[$BRANCH_REF]:-unknown}" >> $GITHUB_OUTPUT

      - name: Authenticate Org
        run: |
          echo ${{ steps.set-env-org.outputs.env }} > ./AUTH_URL.txt
          echo y | sf org login sfdx-url -f ./AUTH_URL.txt -a salesforceOrg -d
          sf config set target-org=${{ steps.set-env-user.outputs.env }}
          sf config set org-api-version=63.0 --global

      - name: Generate package.xml
        run: |
          echo "Destination Branch: $BRANCH_REF"
          echo n | sf sgd:source:delta --to "HEAD" --from $(git merge-base HEAD origin/$BRANCH_REF) --output . -i .ciignore
          echo "--- package.xml generated with added and modified metadata ---"
          cat package/package.xml
          echo "--- destructiveChanges.xml generated with deleted metadata ---"
          cat destructiveChanges/destructiveChanges.xml

      - name: Check package
        id: check_package
        run: |
          if grep -q '<types>' ./package/package.xml; then
            echo "run_job=true" >> $GITHUB_OUTPUT
          else
            echo "run_job=false" >> $GITHUB_OUTPUT
          fi
          echo "check_labels=false" >> $GITHUB_OUTPUT

      - name: Generate Vlocity Delta
        run: |
          mkdir -p vlocity
          git diff --name-only $(git merge-base HEAD origin/${{ github.base_ref }}) HEAD | grep '^vlocity/' > vlocity/changedFiles.txt || true

          echo "projectPath: ." > vlocity/manifest.yaml
          echo "expansionPath: vlocity" >> vlocity/manifest.yaml
          echo "manifest:" >> vlocity/manifest.yaml

          cut -d'/' -f2-3 vlocity/changedFiles.txt | sed 's/\.json$//' | sort -u | while read -r pack; do
            echo "  - $pack" >> vlocity/manifest.yaml
          done

          echo "📝 Manifesto manifest.yaml criado com:"
          cat vlocity/manifest.yaml


      - name: Check Vlocity changes
        id: check_vlocity
        run: |
          if git diff --name-only $(git merge-base HEAD origin/${{ github.base_ref }}) HEAD | grep -q '^vlocity/'; then
            echo "run_vlocity=true" >> $GITHUB_OUTPUT
          else
            echo "run_vlocity=false" >> $GITHUB_OUTPUT
          fi

      - name: Determine Test Command
        id: test-command
        run: |
          RUN_JOB="${{ steps.check_package.outputs.run_job }}"
          if [[ "$GITHUB_EVENT_LABEL_NAME" == "RUN_TESTS" && $RUN_JOB == 'true' ]]; then
            echo "cmd=validate_v2" >> $GITHUB_OUTPUT
          elif [[ "$GITHUB_EVENT_LABEL_NAME" == "NOT_RUN_TESTS" && $RUN_JOB == 'true' ]]; then
            echo "cmd=validate_without_tests" >> $GITHUB_OUTPUT
          else
            echo "cmd=skip" >> $GITHUB_OUTPUT
          fi

      - name: Run Validation
        if: steps.test-command.outputs.cmd != 'skip'
        id: validation
        run: |
          make ${{ steps.test-command.outputs.cmd }} org_name=salesforceOrg
          

      - name: Init Validate Vlocity
        if: steps.check_vlocity.outputs.run_vlocity == 'true'
        run: |
             make vlocity_validate org_name=salesforceOrg


      - name: Validate response from Validation
        id: result
        run: |
           if [[ "${{ steps.check_package.outputs.run_job }}" == 'true' ]]; then
           echo "status=${{ steps.validation.outcome }}" >> $GITHUB_OUTPUT
           elif [[ "${{ steps.check_vlocity.outputs.run_vlocity }}" == 'true' ]]; then
           echo "status=success" >> $GITHUB_OUTPUT
           else
           echo "status=skipped" >> $GITHUB_OUTPUT
           fi

    outputs:
      status: ${{ steps.result.outputs.status }}
