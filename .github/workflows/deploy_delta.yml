name: Deploy to PRD

on:
  push:
    branches:
      - master
    paths:
      - 'force-app/**'

env:
  SF_DISABLE_DNS_CHECK: true
  SF_DISABLE_SOURCE_MEMBER_POLLING: true
  SF_DNS_TIMEOUT: 120

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Instalar dependências do sistema e Salesforce CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y wget curl jq
          npm install @salesforce/cli --global

      - name: Autenticar com a Org PRD
        run: |
          echo "${{ secrets.AUTH_URL_PRD }}" > sfdx-auth-url.txt
          sf org login sfdx-url -f sfdx-auth-url.txt --alias prd --set-default
          sf config set org-api-version=63.0 --global

      - name: Instalar plugin sfdx-git-delta
        run: echo "y" | sf plugins install sfdx-git-delta

      - name: Gerar pacote delta
        run: |
          mkdir -p deploy
          sf sgd source delta --from origin/master --to HEAD --output-dir deploy

      - name: Rodar análise completa do código
        id: run-code-analyzer
        uses: forcedotcom/run-code-analyzer@v1
        with:
          run-command: run
          run-arguments: --normalize-severity --severity-threshold 1 --category "Best Practices,Code Style,Design,Security,Error Prone,Performance" --target "./deploy" --outfile SalesforceCodeAnalyzerResults.json
          results-artifact-name: salesforce-code-analyzer-results

      - name: Validar resultado da análise de código
        if: |
          steps.run-code-analyzer.outputs.exit-code > 0 ||
          steps.run-code-analyzer.outputs.num-sev1-violations > 0 
        run: | 
          echo "------------------------------------"
          echo "------PMD CODE ANALYSIS FAILED------"
          echo "------------------------------------"
          exit 1

      - name: Exibir package.xml gerado
        run: cat deploy/package/package.xml || echo "Nenhum metadata detectado"

      - name: Deploy para produção com todos os testes locais
        run: |
          echo "Iniciando deploy para PRD..."
          sf project deploy start \
            --manifest deploy/package/package.xml \
            --target-org prd \
            --test-level RunLocalTests \
            --wait 120 \
            --coverage-formatters clover \
            | tee deploy/deploy_output.log

      - name: Gerar nome dos artefatos
        id: set-artifact-name
        run: |
          ORG_NAME="PRD"
          export TZ="America/Sao_Paulo"
          TIMESTAMP=$(date +'%d-%m-%Y--%H-%M-%S')
          echo "PACKAGE_XML_ARTIFACT=${ORG_NAME}_Package_xml_${TIMESTAMP}" >> $GITHUB_OUTPUT
          echo "DEPLOY_LOG_ARTIFACT=${ORG_NAME}_Deploy_log_${TIMESTAMP}" >> $GITHUB_OUTPUT

      - name: Salvar package.xml
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.set-artifact-name.outputs.PACKAGE_XML_ARTIFACT }}
          path: deploy/package/package.xml

      - name: Salvar o log de deploy
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.set-artifact-name.outputs.DEPLOY_LOG_ARTIFACT }}
          path: deploy/deploy_output.log
