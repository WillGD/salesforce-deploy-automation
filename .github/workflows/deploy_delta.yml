name:  Deploy code to Org

on:
  push:
    branches: [ dev, qa, uat, staging, hotfix, main ]
env:
  SF_DISABLE_DNS_CHECK: true
  SF_DISABLE_SOURCE_MEMBER_POLLING: true
  SF_DNS_TIMEOUT: 120

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 120
    environment:
      name: ${{ github.head_ref }}
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup nodeJS
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          check-latest: true
        if: github.actor != 'dependabot[bot]'

      - name: Install SFDX CLI
        run: npm install @salesforce/cli -g

      - name: Install the SFDX Git Delta
        run: echo 'y' | sf plugins install sfdx-git-delta

      
      - name: Install Vlocity Build Tool
        run: npm install -g vlocity

      - name: Set ENV Auth URL Org
        id: set-env-org
        run: |
          BRANCH="${GITHUB_REF##*/}"

          declare -A URL_MAP=(
            [dev]="${{ secrets.DEV_AUTH_URL }}"
            [qa]="${{ secrets.QA_AUTH_URL }}"
            [uat]="${{ secrets.UAT_AUTH_URL }}"
            [staging]="${{ secrets.STAGING_AUTH_URL }}"
            [hotfix]="${{ secrets.HOTFIX_AUTH_URL }}"
            [main]="${{ secrets.PROD_AUTH_URL }}"
          )

          echo "env=${URL_MAP[$BRANCH]:-unknown}" >> $GITHUB_OUTPUT

      - name: Set ENV Auth User Org
        id: set-env-user
        run: |
          BRANCH="${GITHUB_REF##*/}"

          declare -A USER_MAP=(
            [dev]="${{ secrets.DEV_AUTH_USER }}"
            [qa]="${{ secrets.QA_AUTH_USER }}"
            [uat]="${{ secrets.UAT_AUTH_USER }}"
            [staging]="${{ secrets.STAGING_AUTH_USER }}"
            [hotfix]="${{ secrets.HOTFIX_AUTH_USER }}"
            [main]="${{ secrets.PROD_AUTH_USER }}"
          )

          echo "env=${USER_MAP[$BRANCH]:-unknown}" >> $GITHUB_OUTPUT

      - name: 'Authenticate Org'
        run: |
          echo ${{ steps.set-env-org.outputs.env }} > ./AUTH_URL.txt
          echo y | sf org login sfdx-url -f ./AUTH_URL.txt -a salesforceOrg -d
          sf config set target-org=${{ steps.set-env-user.outputs.env }}
          sf config set org-api-version=63.0 --global

      - name: Generate package.xml
        run: |
          BRANCH_NAME="${GITHUB_REF##*/}"
          echo "Current branch: $BRANCH_NAME"

          git fetch origin $BRANCH_NAME

          PREVIOUS_COMMIT=$(git rev-parse HEAD^)
          echo "Previous commit: $PREVIOUS_COMMIT"

          echo n | sf sgd:source:delta \
            --to "HEAD" \
            --from "$PREVIOUS_COMMIT" \
            --output-dir . \
            -i .ciignore

          echo "--- package.xml generated with added and modified metadata ---"
          cat package/package.xml || echo "package.xml not found"
          echo "--- destructiveChanges.xml generated with deleted metadata ---"
          cat destructiveChanges/destructiveChanges.xml || echo "destructiveChanges.xml not found"


      - name: 'Check package'
        id: check_package
        run: |
          if grep -q '<types>' ./package/package.xml ; then
            echo "run_job=true" >> $GITHUB_OUTPUT
          else
            echo "run_job=false" >> $GITHUB_OUTPUT
          fi


      - name: Generate Vlocity Delta and Check Changes
        id: check_vlocity
        run: |
              BRANCH_NAME="${GITHUB_REF##*/}"
              echo "Current branch: $BRANCH_NAME"

              git fetch origin $BRANCH_NAME

              mkdir -p vlocity
              PREVIOUS_COMMIT=$(git rev-parse HEAD^)
              echo "Previous commit: $PREVIOUS_COMMIT"
    
              git diff --name-only $PREVIOUS_COMMIT HEAD | grep '^vlocity/' > vlocity/changedFiles.txt || true

              if [ -s vlocity/changedFiles.txt ]; then
              echo "run_vlocity=true" >> $GITHUB_OUTPUT

              echo "projectPath: ." > vlocity/manifest.yaml
              echo "expansionPath: vlocity" >> vlocity/manifest.yaml
              echo "manifest:" >> vlocity/manifest.yaml

              cut -d'/' -f2-3 vlocity/changedFiles.txt | sed 's/\.json$//' | sort -u | while read -r pack; do
              echo "  - $pack" >> vlocity/manifest.yaml
              done
              echo "📝 Manifesto manifest.yaml criado com:"
              cat vlocity/manifest.yaml
              else
              echo "run_vlocity=false" >> $GITHUB_OUTPUT
              fi
      

      - name: 'Init Deploy'
        if: steps.check_package.outputs.run_job == 'true'
        id: validationdeploy
        run: make deploy_v2 org_name=salesforceOrg


      - name: 'Init Deploy Vlocity'
        if: steps.check_vlocity.outputs.run_vlocity == 'true'
        run: |
              make vlocity_deploy org_name=salesforceOrg


      - name: Validate response from Validation
        id: result
        run: |
           if [[ "${{ steps.check_package.outputs.run_job }}" == 'true' ]]; then
           echo "status=${{ steps.validation.outcome }}" >> $GITHUB_OUTPUT
           elif [[ "${{ steps.check_vlocity.outputs.run_vlocity }}" == 'true' ]]; then
           echo "status=success" >> $GITHUB_OUTPUT
           else
           echo "status=skipped" >> $GITHUB_OUTPUT
           fi

    outputs:
      status: ${{ steps.result.outputs.status }}
